< Title > Documentation Œthel
< Subtitle > Obvious & Easy

-> Paragraphs

You can write paragraphs directly.

Jump two lines to write another paragraphs.
You can also back to the line in the same paragraph.

-> Decoration

You can have --bold--.
You can have // italic //.
You can have __underline__.
You can have ==strikethrough==.

You can also combine ==__//--all of them--//__==.
Spaces at begin and end of selected text doesn't count.

-> Lists

* You can list items
* by using `*`
* multiple times

* You can describe tree
    * By breaking the alignement
    * With tabulations
* Or
 * spaces

1. You can also
2. use numbers

§. If you want numbers to be determined later
§. use {§} to replace numbers

-> Links

* You can put external links in your note by using { [...] }.
    * Like that : [http://www.google.com/]
    * Or like [that -> [C:\Program Files\]]

* You can also have internal links by using { # } and { @ }.
    * Like that : #[First target]
    * Or like #[that -> [Seconde target]]
    * Bonus one : #[Click ! -> [Third target]]

Here is how you define targets : @[[First target]]
You can also change the displayed text linked : @[[Second target] Alternative text]

@[Third target]
If you don't want alternative text, use only one pair of bracket.

-> Notes

You can write a note on a line beginning with { @[§] }.
Then, it is possible to reference a note with { ...[§] }.
The next note not already referenced will be linked[§].

@[§] Here is a first note.

You can also use defined numbers to keep a strict reference[2].

@[2] Here is a second note.

-> Titles

To add a title, use {->} at the beginning of the line.
You can define subtitles by adding more {-} at the beginning.

--> Title 2

Paragraph of title 2.

---> Title 3

Paragraph of title 3.

-> Quotes

> You can write quote by using {>} at the beginning of the line.

<
For multiline quotes,
use { < ... /> }.
/>

-> Blocks

You can also define structural blocks for highlight some paragraphs.

< Code > Here is a quote on one line.

<< Note >
Here is a note.
On multiple line.
/>

In fact, titles are blocks : { -> Text } is equivalent to { < Title_1 > Text } and { << Title_1 > Text /> }
Quotes are also blocks : { > Text } is equivalent to { < Quote > Text } and { << Quote > Text /> }

-> Media

If you want to insert a media (like a picture, a video, a table or a code sample), use { { ... } }.

--> Images/Videos

{ cat.png }

> { cat.png }

--> Tables

{
Name        John        Paul        Bob
Age         22          34          58
Happy?      Yes         Yes         No
}

<
{
Name        John        Paul        Bob
Age         22          34          58
Happy?      Yes         Yes         No
}
/>

<
{
Name;John;Paul;Bob
Age;22;34;58
Happy?;Yes;Yes;No
}
/>

<
{
---------------------------------------------------------
| Name        | John        | Paul        | Bob         |
---------------------------------------------------------
| Age         | 22          | 34          | 58          |
---------------------------------------------------------
| Happy?      | Yes         | Yes         | No          |
---------------------------------------------------------
}
/>

--> Graphs

{
Begin --> Point A
Point A -- If µ >= 0 --> Point B
Point A -- Else --> Point C
Point B --> End
Point C --> End
}

<
{
Begin --> Point A
Point A -- If µ >= 0 --> Point B
Point A -- Else --> Point C
Point B --> End
Point C --> End
}
/>

--> Code

{
    public class Program()
    {
        public static void Main()
        {
            Console.WriteLine("Hello world !");
        }
    }
}

<
{
    public class Program()
    {
        public static void Main()
        {
            Console.WriteLine("Hello world !");
        }
    }
}
/>

If a media can't be interpreted, it will be display as code by default.
Also, quotes will ignore medias.

--> Custom

If you use an Œthel interpreter that support other medias, use the media braces to handle them.
The reason is that it will be interpreted by default as code sample by other interpreters.
For that reason, try to use the most textual language so it will be understandable even without your interpreter.

-> Variables

To assign a variable, use { %identifier = text }.
Then to use a variable, use { %identifier }.

-> Comments

You can use comments by using `~~` at the beginning of a line.

~~ Comment on one line

For multiline comments, use `/~~ ... ~~/`.
Two multiline comments can intersect.

/~~
Comment
on multiple lines
~~/