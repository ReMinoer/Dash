< Title > Documentation Language Œthel
< Subtitle > Optimal. Ergonomic. Textual. Highlighting. Evolved. Language.

~~~~
To-Do

- Keep .œ extension ?
- Better multi-line blocks
~~~~

-> Introduction

This language is called Œthel. You can also write it "Œ" or "OE".

"Œthel" (or more commonly "ethel") is one of the name given to the character 'œ'. Given that, it's also a recursive name (there is an œthel (Œ) in the word "œthel").

On Windows, you can type these specials characters:

- { Press Alt and type 0140 } give "Œ"
- { Press Alt and type 0156 } give "œ"

-> Extensions

Used file extensions are :

- .œ : one character geek extension
- .oe : basic two character extension
- .oethel : name extension

Majuscule extensions are also tolerated.

-> Paragraphs

You can write paragraphs directly.

Jump two lines to write another paragraphs.
You can also back to the line in the same paragraph.

< Example >
{
    You can write paragraphs directly.

    Jump two lines to write another paragraphs.
    You can also back to the line in the same paragraph.
}

< Design note >
Come back to the line in the same paragraph is handled in the language because it's a common plain text formatting.

-> Decoration

You can use **bold** with { ** ... ** }.
You can use // italic // with { // ... // }.
You can use __underline__ with { __ ... __ }.
You can use --strikethrough-- with { -- ... -- }.

< Design note >
These symbols have been choosen because they are simple to access on a keyboard, refers to their effects and highlight plain text at different degrees.

You can use all these decoration at the same time if you want. You just need to think to always close the last opened decoration before the others.
**//__Here__ is an --exemple--.//**

< Example >
{
     **//__Here__ is// an --exemple--**.
}

< Design note >
These 4 characters can be used in text if they are not double. For example: "4 * 3 / 2 = _ ?"

-> Lists

You can list items by using { - } at the beginning of lines.

-Item A
-Item B
-Item C

< Example >
{
    -Item A
    -Item B
    -Item C
}

You can describe trees by breaking the alignement with tabulations or spaces.

- Item A
    - Sub-item A1
        - Sub-sub-item A1a
    - Sub-item A2
        - Sub-sub-item A2a
        - Sub-sub-item A2b
- Item B
    - Sub-item B1
        - Sub-sub-item B1a
        - Sub-sub-item B1b

< Example >
{
    - Item A
        - Sub-item A1
            - Sub-sub-item A1a
        - Sub-item A2
            - Sub-sub-item A2a
            - Sub-sub-item A2b
    - Item B
        - Sub-item B1
            - Sub-sub-item B1a
            - Sub-sub-item B1b
}

< Design note >
The { - } is already commonly used for listing in plain text because it's an accessible character on keyboards.

You can also create numbered lists with { 1- 2- 3- }.

1- Item 1
2- Item 2
3- Item 3

< Example >
{
    1- Item 1
    2- Item 2
    3- Item 3
}

< Design note >
Numbers used and order doesn't import. You can put { 1- } on each line if you want. It must just begin by a number. 

If you don't want to use numbers in plain text, use { $- }

$-Item 1
$-Item 2
$-Item 3

< Example >
{
    $-Item 1
    $-Item 2
    $-Item 3
}

< Design note >
In Oethel, { $ } replace numbers when it's possible.

You can combine all these types of lists on different levels if you want.

1- Item 1
    - Sub - item A
    - Sub - item B
2- Item 2
    $- Sub - item A
    $- Sub - item B

< Example >
{
    1- Item 1
        - Sub - item A
        - Sub - item B
    2- Item 2
        $- Sub - item A
        $- Sub - item B
}

-> Links

You can put external links in your note by using { [content][adress] }.
Here is an example : [Link text][http://www.google.com/]

< Example >
{
    [Link text][http://www.google.com/]
}

If you also want to use the adress as text, use { [[adress]] } like so: [[http://www.google.com/]]

< Example >
{
    [[http://www.google.com/]]
}

-> Targets

You can define internal target at a specific position in your document with { @[identifier] }.

< Example >
{
    @[First target]
}

You can also target a specific content by using { @[identifier][content] }.
Here is an example : @[Second target][Target text]

< Example >
{
    @[Second target][Target text]
}

If you want to use the target identifier as text, use { @[[identifier]] } like so: @[[Third target]]

< Example >
{
    @[[Third target]]
}

It's also possible to use multiple identifier for a same target by separate them with comma.

< Example >
{
    @[First target, 1st target][Target text]
    @[[First target, 1st target]] ~~ First identitier will be used as content here.
}

< Design note >
You can also use [ and ] as text if needed.

# Internal links

You can have internal links by using a target identifier at the place of the link.
Here is an internal link : [Link text][Second target]

< Example >
{
    [Link text][Second target]
}

Here is another using its target identifier as text : [[Third target]]

< Example >
{
    [[Third target]]
}

< Design note >
You can build a lexic by combining multi-identifier targets and raw internal links.

< Example >
{
    [[Ethel]] is another way to write [[Oethel]].
    ...
    @[[Oethel,ethel]]: wonderful language
}

-> Notes

You can write a note on a line beginning by a target with a number or { $ } as identifier. { @[$] }.
Then, it is possible to reference that note with { [content][number] }.

If you use { $ }, the next note not already referenced will be linked[$].
If you use a number, it will reference the next note in text with that number[1] or, if it didn't exist, the previous one.

@[$] Here is a first note.
@[1] Here is a second note.

-> Titles

To add a title, use { -> } at the beginning of the line.
You can define subtitles by adding more { - } at the beginning.

< Example >
{
    --> Title 2

    Paragraph of Title 2

    ---> Title 3

    Paragraph of Title 3
}

-> Blocks

You can also define structural blocks for highlight some paragraphs.

< Message > Here is a message on one line.

< Example >
{
    < Code > Here is a quote on one line.
}

< Warning >
Here is a warning on one line.

< Example >
{
    < Warning >
    Here is a warning on one line, declared on previous line.
}

< Note >
Here is a note.

On multiple line.
>

< Example >
{
    < Note >
    Here is a note.

    On multiple line.
    >
}

< Design note >
In fact, titles and quotes are blocks. Because there are common in various output format and can be inline, they have there own syntax.
Titles ({ -> }) are combining lists and blocks syntax. Quotes ({ > }) are the more generic blocks.

-> Media

If you want to insert a media (like a picture, a video or a table) or some text written in another language (like a code sample), you must use { { ... } }.
To indicate the type of media, it must be preceed by a header providing the file extension used for this type of media.

< Design note >
Supported media depend of your converter and of the supoort format. Anyway, converted file must provide an alternative output if the media can't be displayed, like a link or a summary.

If the media that you want to display is inside a file, just provide the path.

< Example >
{
    < .ext > { path/file.ext }
}

If the media can be describe directly in your file with its own language, write it directly.

< Example >
{
    < .ext >
    {
        Here_is_another_language_using_underscores_as_spaces.
    }
}

If you don't indicate a file extension or if it is unknown and data isn't binary, media will be displayed as plain text. 

< Design note >
Try to use understandable languages when you describe directly your media. Oethel is a textual language and shouldn't use binary data.
For that reason, Oethel standard suggest its own syntax for common media.

--> Images/Videos

< .png > { cat.png }

< Example >
{
    < .png > { cat.png }
}

--> Tables

{
    Name        John        Paul        Bob
    Age         22          34          58
    Happy?      Yes         Yes         No
}

< Example >
{
    {
        Name        John        Paul        Bob
        Age         22          34          58
        Happy?      Yes         Yes         No
    }
}

< Example >
{
    {
        Name;John;Paul;Bob
        Age;22;34;58
        Happy?;Yes;Yes;No
    }
}

< Example >
{
    {
        ---------------------------------------------------------
        | Name        | John        | Paul        | Bob         |
        ---------------------------------------------------------
        | Age         | 22          | 34          | 58          |
        ---------------------------------------------------------
        | Happy?      | Yes         | Yes         | No          |
        ---------------------------------------------------------
    }
}

--> Graphs

{
    Begin
    --> Point A
    Point A
    -- If µ >= 0 --> Point B
    -- Else --> Point C
    Point B
    --> End
    Point C
    --> End
    End
}

< Example >
{
    {
        Begin
        --> Point A
        Point A
        -- If µ >= 0 --> Point B
        -- Else --> Point C
        Point B
        --> End
        Point C
        --> End
        End
    }
}

--> Code

< .cs >
{
    public class Program()
    {
        public static void Main()
        {
            Console.WriteLine("Hello world !");
        }
    }
}

< Example >
{
    {
        public class Program()
        {
            public static void Main()
            {
                Console.WriteLine("Hello world !");
            }
        }
    }
}

< Design note >
Converter will use provided extension to apply syntax color highlighting.

-> Comments

You can use comments by using { ~~ } at the beginning of a line.

~~ Comment on one line

< Design note >
{ ~~ } is used as a double character token because { ~ } key doesn't input when you press it once.

For multiline comments, use { ~~~~ ... ~~~~ }.

~~~~
Comment
on multiple lines
~~~~

< Design note >
Some output format can handle comments so they are not always ignoring.

