< Title > Documentation Language Œthel
< Subtitle > Optimal. Ergonomic. Textual. Highlighting. Evolved. Language.

-> Introduction

This language is called Œthel. You can also write it "Œ" or "OE".

"Œthel" (or more commonly "ethel") is one of the name given to the character 'œ'. Given that, it's also a recursive name (there is an œthel (Œ) in the word "œthel").

On Windows, you can type these specials characters:

* { Press Alt and type 0140 } give "Œ"
* { Press Alt and type 0156 } give "œ"

-> Extensions

Used file extensions are :

* .œ : one character geek extension
* .oe : basic two character extension
* .oethel : name extension

Majuscule extensions are also tolerated.

-> Paragraphs

You can write paragraphs directly.

Jump two lines to write another paragraphs.
You can also back to the line in the same paragraph.

< Example >
{
    You can write paragraphs directly.

    Jump two lines to write another paragraphs.
    You can also back to the line in the same paragraph.
}

< Design note >
Come back to the line in the same paragraph is handled in the language because it's a common plain text formatting.

-> Decoration

You can use --bold-- with { -- ... -- }.
You can use // italic // with { // ... // }.
You can use __underline__ with { __ ... __ }.
You can use ==strikethrough== with { == ... == }.

< Design note >
These symbols have been choosen because they are simple to access on a keyboard, refers to their effects and highlight plain text at different degrees.

-> Lists

You can list items by using { * } at the beginning of lines.

* Item A
* Item B
* Item C

< Example >
{
    * Item A
    * Item B
    * Item C
}

You can describe trees by breaking the alignement with tabulations or spaces.

* Item A
 * Sub-item A1
 * Sub-item A2
* Item B
 * Sub-item B1

< Example >
{
    * Item A
        * Sub-item A1
        * Sub-item A2
    * Item B
    * Sub-item B1
}

< Design note >
The asterisk { * } is already commonly used for listing in plain text because it's an accessible character on keyboards and pretty similar to a bullet.

You can also create numbered lists with { 1. 2. 3. }.

1. Item 1
2. Item 2
3. Item 3

< Example >
{
    1. Item 1
    2. Item 2
    3. Item 3
}

< Design note >
Numbers used and order doesn't import. You can put { 1. } on each line if you want. It must just begin by a number. 

If you don't want to use numbers in plain text, use { $. }

$. Item 1
$. Item 2
$. Item 3

< Example >
{
    $. Item 1
    $. Item 2
    $. Item 3
}

< Design note >
In Oethel, { $ } replace numbers when it's possible.

You can combine all these types of lists on different levels if you want.

< Example >
{
    1. Item 1
        * Sub-item A
        * Sub-item B
    2. Item 2
        $. Sub-item A
        $. Sub-item B
}

-> Links

You can put external links in your note by using { #[...] }.
Here is an external link : #[http://www.google.com/]

< Example >
{
    #[http://www.google.com/]
}

Here is another with an alternative text : #[[http://www.google.com/] Alternative text]

< Example >
{
    #[[http://www.google.com/] Alternative text]
    #[Alternative text [http://www.google.com/]]
}

You can also have internal links by using an identifier at the place of the link.
Here is an internal link : #[First target]

< Example >
{
    #[First target]
}

Here is another with an alternative text : #[[Seconde target] Alternative text]

< Example >
{
    #[[Seconde target] Alternative text]
    #[Alternative text [Seconde target]]
}

You can define internal target with { @[An identifier] }.
Here is an internal target : @[First target]

< Example >
{
    @[First target]
}

You can also change the linked displayed text : @[[Second target] Alternative text]

< Example >
{
    @[[Second target] Alternative text]
    @[Alternative text [Second target]]
}

@[[Third target]]
If you don't want to show text, use two brackets and ignore the alternative text

< Example >
{
    @[[Third target]]
}

-> Notes

You can write a note on a line beginning with { @[$] }.
Then, it is possible to reference that note with { ...[$] }.
The next note not already referenced will be linked[$].

@[$] Here is a first note.

{ ... word[$] ... } is equivalent to { ... #[word[$]] ... }.
You can also use defined numbers to keep a strict[1] and multiple[1] references to a note : { ...[1] }.

@[1] Here is a second note.

-> Titles

To add a title, use { -> } at the beginning of the line.
You can define subtitles by adding more { - } at the beginning.

< Example >
{
    --> Title 2

    Paragraph of Title 2

    ---> Title 3

    Paragraph of Title 3
}

-> Quotes

> You can write quote by using { > } at the beginning of the line.

-> Blocks

You can also define structural blocks for highlight some paragraphs.

< Code > Here is a quote on one line.

< Example >
{
    < Code > Here is a quote on one line.
}

< Warning >
Here is a warning on one line.

< Example >
{
    < Warning >
    Here is a warning on one line, declared on previous line.
}

<< Note >
Here is a note.
On multiple line.
>

< Example >
{
    << Note >
    Here is a note.
    On multiple line.
    >
}

In fact, titles are blocks : { -> Text } is equivalent to { < Title1 > Text } and { << Title1 > Text /> }
Quotes are also blocks : { > Text } is equivalent to { < Quote > Text } and { << Quote > Text /> }

-> Media

If you want to insert a media (like a picture, a video, a table or a code sample), use { { ... } }.

You can put media in block

--> Images/Videos

{ cat.png }

< Example >
{
    { cat.png }
}

--> Tables

{
    Name        John        Paul        Bob
    Age         22          34          58
    Happy?      Yes         Yes         No
}

< Example >
{
    {
        Name        John        Paul        Bob
        Age         22          34          58
        Happy?      Yes         Yes         No
    }
}

< Example >
{
    {
        Name;John;Paul;Bob
        Age;22;34;58
        Happy?;Yes;Yes;No
    }
}

< Example >
{
    {
        ---------------------------------------------------------
        | Name        | John        | Paul        | Bob         |
        ---------------------------------------------------------
        | Age         | 22          | 34          | 58          |
        ---------------------------------------------------------
        | Happy?      | Yes         | Yes         | No          |
        ---------------------------------------------------------
    }
}

--> Graphs

{
    Begin
    --> Point A
    Point A
    -- If µ >= 0 --> Point B
    -- Else --> Point C
    Point B
    --> End
    Point C
    --> End
    End
}

< Example >
{
    {
        Begin
        --> Point A
        Point A
        -- If µ >= 0 --> Point B
        -- Else --> Point C
        Point B
        --> End
        Point C
        --> End
        End
    }
}

--> Code

{
    public class Program()
    {
        public static void Main()
        {
            Console.WriteLine("Hello world !");
        }
    }
}

< Example >
{
    {
        public class Program()
        {
            public static void Main()
            {
                Console.WriteLine("Hello world !");
            }
        }
    }
}

< Design note >
If a media can't be interpreted, it will be display as code by default.

--> Custom

If you use an Œthel interpreter that support other medias, use the media braces to handle them.
The reason is that it will be interpreted by default as code sample by other interpreters.
For that reason, try to use the most textual language so it will be understandable even without your interpreter.

-> Variables

To assign a variable, use { %identifier = text }.
Then to use a variable, use { %identifier } directly in the text.
The identifier will be replace by the assigned text.

-> Comments

~~ Comment on one line

You can use comments by using { ~~ } at the beginning of a line.

< Design note >
{ ~~ } is used as a double character token because { ~ } key doesn't input when you press it once.

/~~
Comment
on multiple lines
~~/

For multiline comments, use { /~~ ... ~~/ }.
